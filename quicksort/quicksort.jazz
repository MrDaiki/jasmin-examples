

param int tab_size = 4096;

fn flag3 (
    reg mut ptr u64[tab_size] tab, 
    reg u64 start,
    reg u64 end, 
    reg u64 pivot
) -> reg mut ptr u64[tab_size] {

    reg u64 bellow_start = start;
    reg u64 upper_start = end;

    reg u64 i = start;
    while (i < upper_start) {

        reg u64 current_value = tab[i];
        if (current_value < pivot) {
            reg u64 store = tab[bellow_start];
            tab[bellow_start] = current_value;
            tab[i] = store;
            bellow_start +=1;
            i+=1;
        }

        else if (current_value == pivot ) {
            i+=1;
        }

        else {
            upper_start -=1;
            reg u64 store = tab[upper_start];
            tab[upper_start] = current_value;
            tab[i] = store;
        }

    }

    return tab;

}

fn lower_bound(
    reg ptr u64[tab_size] tab, 
    reg u64 start,
    reg u64 end, 
    reg u64 pivot
) -> reg u64 {
    reg u64 i = start;
    
    while (i < end && tab[i] < pivot) {
        i+=1;
    }

    return i;
}

fn upper_bound(
    reg ptr u64[tab_size] tab,
    reg u64 start,
    reg u64 end,
    reg u64 pivot
) -> reg u64 {  
    reg u64 i = end;

    while (i > start && tab[i] > pivot) {
        i-=1;
    }

    return i;

}

fn knuth_shuffle(
    reg ptr u64[tab_size] tab,
    reg u64 size
)
-> reg ptr u64[tab_size]
{
    reg u64 i = 0;
    reg u64[tab_size] tab_c;
    tab_c = #randombytes(tab_c);

    while (i < size) {

        reg u64 j = tab_c[i];
        j = j % (size - i);
        reg u64 store = tab[i];
        tab[i] = tab[j];
        tab[j] = store;
        i+=1;

    }
    return tab;
}


fn sub_quicksort (
    reg ptr u64[tab_size] tab, 
    reg u64 start,
    reg u64 end
) -> reg ptr u64[tab_size] {

   if (end - start <= 1) {
    reg u64 pivot = tab[start];

    reg ptr u64[tab_size] tab_c = flag3(tab,start,end,pivot);

    reg u64 lb = lower_bound(tab,start,end,pivot);
    reg u64 ub = upper_bound(tab,start,end,pivot);

    tab_c = sub_quicksort(tab_c,start,lb);
    tab = sub_quicksort(tab_c,ub,end);
   }
    return tab;

}

export fn quicksort (
    reg ptr u64[tab_size] tab,
    reg u64 size
) -> reg ptr u64[tab_size] {
    tab = knuth_shuffle(tab,size);
    tab = sub_quicksort(tab,0,size);
    return tab;
}
