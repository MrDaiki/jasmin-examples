
inline fn swap(
    reg u64 arr,
    reg u64 i,
    reg u64 j
) {
    reg u64 tmp;
    tmp = [arr + 8*i];
    [arr + 8*i] = [arr + 8*j];
    [arr + 8*j] = tmp;
}


inline fn push_limits(
    reg u64 buffer, 
    reg u64 lower, 
    reg u64 upper,
    reg u64 head
    ) -> reg u64 {
        [buffer + 8*head] = lower;
        [buffer + 8*(head+1)] = upper;
        head += 2;
        return head;
}

inline fn pop_limits(
    reg u64 buffer, 
    reg u64 head
    ) -> reg u64,reg u64,reg u64 {
        reg u64 lower,upper;
        upper = [buffer + 8*(head-1)];
        lower = [buffer + 8*(head-2)];
        head-=2;
        return head,lower,upper;
}


inline fn three_flags(
    reg u64 arr,
    reg u64 lower,
    reg u64 upper
) -> reg u64, reg u64{
    reg u64 pivot; 
    pivot = [arr + 8*lower];
    
    reg u64 lv,mv,uv;
    lv = lower;
    mv = lower;
    uv = upper;

    while (mv <= uv) {
        reg u64 val;
        val = [arr + 8*mv];
        if (val < pivot) {
            swap(arr,lv,mv);
            lv += 1;
            mv += 1;
        } else if (val == pivot) {
            mv += 1;
        } else {
            swap(arr,mv,uv);
            uv -= 1;
        }
    }

    return lv,mv;
}

export fn quicksort (
    reg u64 buffer,
    reg u64 tab,
    reg u64 size
) {
    reg u64 stack_head;

    //push initial limits of the algorithm
    stack_head = 0;
    stack_head = push_limits(buffer,0,size-1,stack_head);

    while (stack_head > 0) {
        reg u64 lower,upper;
        stack_head,lower,upper = pop_limits(buffer,stack_head);

        if (lower < upper) {
            
            reg u64 lv,mv;

            lv,mv = three_flags(tab,lower,upper);

            stack_head = push_limits(buffer,lower,lv,stack_head);
            stack_head = push_limits(buffer,mv,upper,stack_head);
        }
    }

 
}
